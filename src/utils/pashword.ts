import * as bigintConversion from "bigint-conversion";
import jsSHA from "jssha";
import scrypt from "scrypt-js";

// Variables for Scrypt Hashing
const N = 1 << 15;
const r = 8;
const p = 1;

const allowedCharacters =
  "@#$%&*._!0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
const alphabets = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
const uppercaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const lowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
const numbers = "1234567890";
const validSymbols = "@#$%&*._!";

// Takes in string and returns an array of bytes
const encodeUtf8 = (str: string): Uint8Array => {
  return new TextEncoder().encode(str);
};

// Removes Numbers or Symbols from Pashword
const sanitize = (
  pashword: string,
  noSymbols?: boolean,
  noNumbers?: boolean
): string => {
  // Initialize SHAKE256 for PRNG
  const prngObj = new jsSHA("SHAKE256", "TEXT", { encoding: "UTF8" });

  // Convert Pashword to Array of Strings
  let pashwordArray = pashword.split("");

  // Generate a random number from 0 to alphabets.length-1
  const generateIndex = (hashThis: string): number => {
    prngObj.update(hashThis);
    // Same process as generateIndex() in generatePashword()
    let prng = prngObj.getHash("UINT8ARRAY", { outputLen: 256 });
    let result = bigintConversion.bufToBigint(prng);
    return Number(result % BigInt(alphabets.length));
  };

  // If symbols have to be removed
  if (noSymbols) {
    for (let i = 0; i < pashwordArray.length; i++) {
      // If character is a symbol
      if (validSymbols.includes(pashwordArray[i])) {
        // Generate a random index using the (index+symbol)
        // Replace the symbol with an alphabet at the generated index
        pashwordArray[i] =
          alphabets[generateIndex(i.toString() + pashwordArray[i])];
      }
    }
  }

  // If numbers have to be removed
  if (noNumbers) {
    for (let i = 0; i < pashwordArray.length; i++) {
      // If character is a number
      if (parseInt(pashwordArray[i]) >= 0 && parseInt(pashwordArray[i]) <= 9) {
        // Generate a random index using the (index+number)
        // Replace the number with an alphabet at the generated index
        pashwordArray[i] =
          alphabets[generateIndex(i.toString() + pashwordArray[i])];
      }
    }
  }

  // Return the pashword array as a string
  return pashwordArray.join("");
};

export const generatePashword = (
  toHash: string,
  pashwordLength: number,
  website: string,
  username: string
): string => {
  // INITIALIZE SHAKE256 FOR PRNG
  const shaObj = new jsSHA("SHAKE256", "UINT8ARRAY");
  // INITIALIZE SHA3-512 FOR FIRST ENCRYPTION
  const sha3Obj = new jsSHA("SHA3-512", "TEXT", { encoding: "UTF8" });

  // Convert toHash json object to its own SHA3-512 hash sum in HEX
  sha3Obj.update(toHash);
  toHash = sha3Obj.getHash("HEX");

  // Generate Scrypt Hash
  const scryptHash = scrypt.syncScrypt(
    encodeUtf8(toHash),
    encodeUtf8(website + username),
    N,
    r,
    p,
    32
  );

  // Generate a random number from 0 to modulo-1
  const generateIndex = (modulo: number) => {
    // Feed sryptHash as seed to SHAKE256
    shaObj.update(scryptHash);
    // PRNG is a 256 bit array generated by SHAKE256
    let prng = shaObj.getHash("UINT8ARRAY", { outputLen: 256 });
    // Convert the 256 bit array to 256 bit BigInt
    let result = bigintConversion.bufToBigint(prng);

    return Number(result % BigInt(modulo));
  };

  // generate a random index from 0 to characterSet.length
  // and return the character at that index
  const pickCharacter = (characterSet: string) => {
    return characterSet[generateIndex(characterSet.length)];
  };

  // Generate Array: 0,1,2,3,4,5,6...pashwordLength-1
  let pickIndex = [];
  for (let i = 0; i < pashwordLength; i++) {
    pickIndex.push(i);
  }

  // generate a random index from 0 to pickIndex.length
  let removeIndex = generateIndex(pickIndex.length);
  // index1 is the element at that generated index
  // and the value is between 0 and pashwordLength-1
  let index1 = pickIndex[removeIndex];
  // remove that element from the pickIndex array
  // we can never pick the same element from pickIndex again
  // and pickIndex.length decrements by one
  pickIndex.splice(removeIndex, 1);

  // Repeat 3 more times for index2, index3 and index4
  removeIndex = generateIndex(pickIndex.length);
  let index2 = pickIndex[removeIndex];
  pickIndex.splice(removeIndex, 1);

  removeIndex = generateIndex(pickIndex.length);
  let index3 = pickIndex[removeIndex];
  pickIndex.splice(removeIndex, 1);

  removeIndex = generateIndex(pickIndex.length);
  let index4 = pickIndex[removeIndex];
  pickIndex.splice(removeIndex, 1);

  let pashword = "";
  // Build a pashword from 0 to pashwordLength-1
  for (let i = 0; i < pashwordLength; i++) {
    if (i === index1) {
      // pick character from lowercase if index1
      pashword += pickCharacter(lowercaseLetters);
    } else if (i === index2) {
      // pick character from uppercase if index2
      pashword += pickCharacter(uppercaseLetters);
    } else if (i === index3) {
      // pick character from symbols if index3
      pashword += pickCharacter(validSymbols);
    } else if (i === index4) {
      // pick character from numbers if index4
      pashword += pickCharacter(numbers);
    } else {
      // pick a character from universal set for other indices
      pashword += pickCharacter(allowedCharacters);
    }
  }

  return pashword;
};

export { sanitize };
